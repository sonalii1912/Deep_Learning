# -*- coding: utf-8 -*-
"""scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15kCjmidGcrKUDkquLCkk5TrelSWOeMcJ
"""

import yfinance as yf
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
import matplotlib.pyplot as plt

symbol = "GOOGL"
start_date = "2010-01-01"
end_date = "2020-12-31"
data = yf.download(symbol, start=start_date, end=end_date)
data = data[['Close']]

# Normalize the data
scaler = MinMaxScaler()
data['Close'] = scaler.fit_transform(data['Close'].values.reshape(-1, 1))
print(len(data))

n_steps = 30
X, y = [], []

for i in range(len(data) - n_steps):
    X.append(data.values[i:i + n_steps])
    y.append(data.values[i + n_steps])

X, y = np.array(X), np.array(y)
print(X.shape, y.shape)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train.shape

model = tf.keras.Sequential([
    tf.keras.layers.SimpleRNN(20, activation='tanh', input_shape=(X_train.shape[1:])),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=10, batch_size=32)

plt.plot(scaler.inverse_transform(model.predict(X_test)[:100]))
plt.plot(scaler.inverse_transform(y_test[:100]))
plt.show()